Module @ 1:1-12:21 (0-152) {
  statements: [
    Var @ 1:1-1:10 (0-9) {
      name: Identifier @ 1:5-1:6 (4-5) = n
      typename: <none>
      initializer: NumericLiteral @ 1:9-1:10 (8-9) = 1
    }
    Var @ 2:1-7:2 (11-101) {
      name: Identifier @ 2:5-2:6 (15-16) = f
      typename: <none>
      initializer: Function @ 2:9-7:2 (19-101) {
        name: <none>
        type_parameters: <none>
        parameters: [
          Parameter @ 2:19-2:28 (29-38) {
            name: Identifier @ 2:19-2:20 (29-30) = x
            typename: Identifier @ 2:22-2:28 (32-38) = string
          }
        ]
        typename: <none>
        body: [
          Return @ 3:5-6:6 (47-98) {
            expression: Object @ 3:12-6:6 (54-98) {
              properties: [
                PropertyInitializer @ 4:9-4:17 (65-73) {
                  name: Identifier @ 4:9-4:14 (65-70) = first
                  initializer: Identifier @ 4:16-4:17 (72-73) = x
                }
                PropertyInitializer @ 5:9-5:16 (84-91) {
                  name: Identifier @ 5:9-5:13 (84-88) = last
                  initializer: Identifier @ 5:15-5:16 (90-91) = n
                }
              ]
            }
          }
        ]
      }
    }
    ExpressionStatement @ 8:1-8:11 (103-113) {
      expression: Call @ 8:1-8:11 (103-113) {
        expression: Identifier @ 8:1-8:2 (103-104) = f
        type_arguments: <none>
        arguments: [
          StringLiteral @ 8:3-8:10 (105-112) = "first"
        ]
      }
    }
    ExpressionStatement @ 9:1-9:5 (115-119) {
      expression: Call @ 9:1-9:5 (115-119) {
        expression: Identifier @ 9:1-9:2 (115-116) = f
        type_arguments: <none>
        arguments: [
          NumericLiteral @ 9:3-9:4 (117-118) = 1
        ]
      }
    }
    ExpressionStatement @ 10:1-10:5 (121-125) {
      expression: Call @ 10:1-10:5 (121-125) {
        expression: Identifier @ 10:1-10:2 (121-122) = n
        type_arguments: <none>
        arguments: [
          NumericLiteral @ 10:3-10:4 (123-124) = 1
        ]
      }
    }
    ExpressionStatement @ 11:1-11:4 (127-130) {
      expression: Call @ 11:1-11:4 (127-130) {
        expression: Identifier @ 11:1-11:2 (127-128) = f
        type_arguments: <none>
        arguments: [
        ]
      }
    }
    ExpressionStatement @ 12:1-12:21 (132-152) {
      expression: Call @ 12:1-12:21 (132-152) {
        expression: Identifier @ 12:1-12:2 (132-133) = f
        type_arguments: <none>
        arguments: [
          StringLiteral @ 12:3-12:10 (134-141) = "first"
          StringLiteral @ 12:12-12:20 (143-151) = "second"
        ]
      }
    }
  ]
}
