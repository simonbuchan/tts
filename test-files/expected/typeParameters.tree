Module @ 1:1-9:46 (0-571) {
  statements: [
    Var @ 1:1-1:68 (0-67) {
      name: Identifier @ 1:5-1:10 (4-9) = apply
      typename: <none>
      initializer: Function @ 1:13-1:68 (12-67) {
        name: <none>
        type_parameters: [
          TypeParameter @ 1:23-1:24 (22-23) {
            name: Identifier @ 1:23-1:24 (22-23) = T
          }
          TypeParameter @ 1:25-1:26 (24-25) {
            name: Identifier @ 1:25-1:26 (24-25) = U
          }
        ]
        parameters: [
          Parameter @ 1:28-1:42 (27-41) {
            name: Identifier @ 1:28-1:29 (27-28) = f
            typename: SignatureDeclaration @ 1:31-1:42 (30-41) {
              type_parameters: <none>
              parameters: [
                Parameter @ 1:32-1:36 (31-35) {
                  name: Identifier @ 1:32-1:33 (31-32) = x
                  typename: Identifier @ 1:35-1:36 (34-35) = T
                }
              ]
              typename: Identifier @ 1:41-1:42 (40-41) = U
            }
          }
          Parameter @ 1:44-1:48 (43-47) {
            name: Identifier @ 1:44-1:45 (43-44) = x
            typename: Identifier @ 1:47-1:48 (46-47) = T
          }
        ]
        typename: Identifier @ 1:51-1:52 (50-51) = U
        body: [
          Return @ 1:55-1:66 (54-65) {
            expression: Call @ 1:62-1:66 (61-65) {
              expression: Identifier @ 1:62-1:63 (61-62) = f
              type_arguments: <none>
              arguments: [
                Identifier @ 1:64-1:65 (63-64) = x
              ]
            }
          }
        ]
      }
    }
    Var @ 2:1-2:106 (68-173) {
      name: Identifier @ 2:5-2:11 (72-78) = apply2
      typename: SignatureDeclaration @ 2:13-2:46 (80-113) {
        type_parameters: [
          TypeParameter @ 2:14-2:15 (81-82) {
            name: Identifier @ 2:14-2:15 (81-82) = T
          }
          TypeParameter @ 2:16-2:17 (83-84) {
            name: Identifier @ 2:16-2:17 (83-84) = U
          }
        ]
        parameters: [
          Parameter @ 2:19-2:34 (86-101) {
            name: Identifier @ 2:19-2:21 (86-88) = f2
            typename: SignatureDeclaration @ 2:23-2:34 (90-101) {
              type_parameters: <none>
              parameters: [
                Parameter @ 2:24-2:28 (91-95) {
                  name: Identifier @ 2:24-2:25 (91-92) = x
                  typename: Identifier @ 2:27-2:28 (94-95) = T
                }
              ]
              typename: Identifier @ 2:33-2:34 (100-101) = U
            }
          }
          Parameter @ 2:36-2:40 (103-107) {
            name: Identifier @ 2:36-2:37 (103-104) = x
            typename: Identifier @ 2:39-2:40 (106-107) = T
          }
        ]
        typename: Identifier @ 2:45-2:46 (112-113) = U
      }
      initializer: Function @ 2:49-2:106 (116-173) {
        name: <none>
        type_parameters: [
          TypeParameter @ 2:59-2:60 (126-127) {
            name: Identifier @ 2:59-2:60 (126-127) = T
          }
          TypeParameter @ 2:61-2:62 (128-129) {
            name: Identifier @ 2:61-2:62 (128-129) = U
          }
        ]
        parameters: [
          Parameter @ 2:64-2:79 (131-146) {
            name: Identifier @ 2:64-2:66 (131-133) = f3
            typename: SignatureDeclaration @ 2:68-2:79 (135-146) {
              type_parameters: <none>
              parameters: [
                Parameter @ 2:69-2:73 (136-140) {
                  name: Identifier @ 2:69-2:70 (136-137) = x
                  typename: Identifier @ 2:72-2:73 (139-140) = T
                }
              ]
              typename: Identifier @ 2:78-2:79 (145-146) = U
            }
          }
          Parameter @ 2:81-2:85 (148-152) {
            name: Identifier @ 2:81-2:82 (148-149) = x
            typename: Identifier @ 2:84-2:85 (151-152) = T
          }
        ]
        typename: Identifier @ 2:88-2:89 (155-156) = U
        body: [
          Return @ 2:92-2:104 (159-171) {
            expression: Call @ 2:99-2:104 (166-171) {
              expression: Identifier @ 2:99-2:101 (166-168) = f3
              type_arguments: <none>
              arguments: [
                Identifier @ 2:102-2:103 (169-170) = x
              ]
            }
          }
        ]
      }
    }
    ExpressionStatement @ 3:1-3:60 (174-233) {
      expression: Call @ 3:1-3:60 (174-233) {
        expression: Identifier @ 3:1-3:6 (174-179) = apply
        type_arguments: [
          Identifier @ 3:7-3:13 (180-186) = number
          Identifier @ 3:15-3:21 (188-194) = number
        ]
        arguments: [
          Function @ 3:23-3:56 (196-229) {
            name: <none>
            type_parameters: <none>
            parameters: [
              Parameter @ 3:33-3:42 (206-215) {
                name: Identifier @ 3:33-3:34 (206-207) = n
                typename: Identifier @ 3:36-3:42 (209-215) = number
              }
            ]
            typename: <none>
            body: [
              Return @ 3:46-3:54 (219-227) {
                expression: Identifier @ 3:53-3:54 (226-227) = n
              }
            ]
          }
          NumericLiteral @ 3:58-3:59 (231-232) = 1
        ]
      }
    }
    ExpressionStatement @ 4:1-4:52 (234-285) {
      expression: Call @ 4:1-4:52 (234-285) {
        expression: Identifier @ 4:1-4:6 (234-239) = apply
        type_arguments: [
          Identifier @ 4:7-4:13 (240-246) = number
        ]
        arguments: [
          Function @ 4:15-4:48 (248-281) {
            name: <none>
            type_parameters: <none>
            parameters: [
              Parameter @ 4:25-4:34 (258-267) {
                name: Identifier @ 4:25-4:26 (258-259) = m
                typename: Identifier @ 4:28-4:34 (261-267) = number
              }
            ]
            typename: <none>
            body: [
              Return @ 4:38-4:46 (271-279) {
                expression: Identifier @ 4:45-4:46 (278-279) = m
              }
            ]
          }
          NumericLiteral @ 4:50-4:51 (283-284) = 2
        ]
      }
    }
    ExpressionStatement @ 5:1-5:73 (286-358) {
      expression: Call @ 5:1-5:73 (286-358) {
        expression: Identifier @ 5:1-5:6 (286-291) = apply
        type_arguments: [
          Identifier @ 5:7-5:13 (292-298) = number
          Identifier @ 5:15-5:21 (300-306) = number
          Identifier @ 5:23-5:29 (308-314) = number
        ]
        arguments: [
          Function @ 5:31-5:64 (316-349) {
            name: <none>
            type_parameters: <none>
            parameters: [
              Parameter @ 5:41-5:50 (326-335) {
                name: Identifier @ 5:41-5:42 (326-327) = l
                typename: Identifier @ 5:44-5:50 (329-335) = number
              }
            ]
            typename: <none>
            body: [
              Return @ 5:54-5:62 (339-347) {
                expression: Identifier @ 5:61-5:62 (346-347) = l
              }
            ]
          }
          StringLiteral @ 5:66-5:72 (351-357) = "oops"
        ]
      }
    }
    ExpressionStatement @ 6:1-6:60 (359-418) {
      expression: Call @ 6:1-6:60 (359-418) {
        expression: Identifier @ 6:1-6:6 (359-364) = apply
        type_arguments: [
          Identifier @ 6:7-6:13 (365-371) = string
          Identifier @ 6:15-6:21 (373-379) = string
        ]
        arguments: [
          Function @ 6:23-6:56 (381-414) {
            name: <none>
            type_parameters: <none>
            parameters: [
              Parameter @ 6:33-6:42 (391-400) {
                name: Identifier @ 6:33-6:34 (391-392) = k
                typename: Identifier @ 6:36-6:42 (394-400) = number
              }
            ]
            typename: <none>
            body: [
              Return @ 6:46-6:54 (404-412) {
                expression: Identifier @ 6:53-6:54 (411-412) = k
              }
            ]
          }
          NumericLiteral @ 6:58-6:59 (416-417) = 4
        ]
      }
    }
    ExpressionStatement @ 7:1-7:63 (419-481) {
      expression: Call @ 7:1-7:63 (419-481) {
        expression: Identifier @ 7:1-7:6 (419-424) = apply
        type_arguments: [
          Identifier @ 7:7-7:13 (425-431) = string
          Identifier @ 7:15-7:21 (433-439) = number
        ]
        arguments: [
          Function @ 7:23-7:56 (441-474) {
            name: <none>
            type_parameters: <none>
            parameters: [
              Parameter @ 7:33-7:42 (451-460) {
                name: Identifier @ 7:33-7:34 (451-452) = j
                typename: Identifier @ 7:36-7:42 (454-460) = number
              }
            ]
            typename: <none>
            body: [
              Return @ 7:46-7:54 (464-472) {
                expression: Identifier @ 7:53-7:54 (471-472) = j
              }
            ]
          }
          StringLiteral @ 7:58-7:62 (476-480) = "ok"
        ]
      }
    }
    ExpressionStatement @ 8:1-8:44 (482-525) {
      expression: Call @ 8:1-8:44 (482-525) {
        expression: Identifier @ 8:1-8:6 (482-487) = apply
        type_arguments: <none>
        arguments: [
          Function @ 8:7-8:40 (488-521) {
            name: <none>
            type_parameters: <none>
            parameters: [
              Parameter @ 8:17-8:26 (498-507) {
                name: Identifier @ 8:17-8:18 (498-499) = i
                typename: Identifier @ 8:20-8:26 (501-507) = number
              }
            ]
            typename: <none>
            body: [
              Return @ 8:30-8:38 (511-519) {
                expression: Identifier @ 8:37-8:38 (518-519) = i
              }
            ]
          }
          NumericLiteral @ 8:42-8:43 (523-524) = 5
        ]
      }
    }
    ExpressionStatement @ 9:1-9:46 (526-571) {
      expression: Call @ 9:1-9:46 (526-571) {
        expression: Identifier @ 9:1-9:6 (526-531) = apply
        type_arguments: <none>
        arguments: [
          Function @ 9:7-9:40 (532-565) {
            name: <none>
            type_parameters: <none>
            parameters: [
              Parameter @ 9:17-9:26 (542-551) {
                name: Identifier @ 9:17-9:18 (542-543) = s
                typename: Identifier @ 9:20-9:26 (545-551) = string
              }
            ]
            typename: <none>
            body: [
              Return @ 9:30-9:38 (555-563) {
                expression: Identifier @ 9:37-9:38 (562-563) = s
              }
            ]
          }
          StringLiteral @ 9:42-9:45 (567-570) = "a"
        ]
      }
    }
  ]
}
